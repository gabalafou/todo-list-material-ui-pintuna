{"version":3,"sources":["features/todo/TodoItem.module.css","app/hooks.ts","features/todo/todoSlice.ts","features/todo/TodoItem.tsx","features/todo/Todo.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppSelector","useSelector","todoSlice","createSlice","name","initialState","todos","reducers","addTodo","state","action","push","text","payload","completed","removeTodo","editTodoText","index","toggleTodo","todo","actions","selectTodos","TodoItem","props","labelId","onToggle","onDelete","onEditText","useState","isEditing","setIsEditing","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","onClick","color","TextField","value","onChange","event","target","onBlur","ListItemText","className","styles","id","primary","onDoubleClick","ListItemSecondaryAction","IconButton","aria-label","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","form","margin","spacing","Todo","classes","dispatch","useDispatch","input","React","createRef","noValidate","autoComplete","onSubmit","preventDefault","current","todoText","inputRef","label","fullWidth","List","map","App","store","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be8696f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"completed\":\"TodoItem_completed__1y86i\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport type { Todo } from './todoTypes';\n\nexport interface TodoState {\n  todos: Todo[];\n}\n\nconst initialState: TodoState = {\n  todos: [],\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    addTodo: (state, action: PayloadAction<string>) => {\n      state.todos.push({\n        text: action.payload,\n        completed: false,\n      });\n    },\n    removeTodo: (state, action: PayloadAction<number>) => {\n      delete state.todos[action.payload];\n    },\n    editTodoText: (state, action: PayloadAction<[number, string]>) => {\n      const [index, text] = action.payload;\n      state.todos[index].text = text;\n    },\n    toggleTodo: (state, action: PayloadAction<number>) => {\n      const index = action.payload;\n      const todo = state.todos[index];\n      todo.completed = !todo.completed;\n    },\n  },\n});\n\n// export const { increment, decrement, incrementByAmount } = counterSlice.actions;\nexport const { addTodo, removeTodo, editTodoText, toggleTodo } =\n  todoSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectTodos = (state: RootState) => state.todo.todos;\n\nexport default todoSlice.reducer;\n","import React, { useState } from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TextField from '@material-ui/core/TextField';\n\nimport styles from './TodoItem.module.css';\nimport type { Todo } from './todoTypes';\n\ninterface TodoItemProps {\n  todo: Todo;\n  labelId: string;\n  onToggle: () => void;\n  onDelete: () => void;\n  onEditText: (text: string) => void;\n}\n\nexport function TodoItem(props: TodoItemProps) {\n  const { todo, labelId, onToggle, onDelete, onEditText } = props;\n  const [isEditing, setIsEditing] = useState(false);\n\n  return (\n    <ListItem role={undefined} dense button>\n      <ListItemIcon>\n        <Checkbox\n          edge=\"start\"\n          checked={todo.completed}\n          tabIndex={-1}\n          disableRipple\n          inputProps={{ 'aria-labelledby': labelId }}\n          onClick={onToggle}\n          color=\"default\"\n        />\n      </ListItemIcon>\n      {isEditing ? (\n        <TextField\n          value={todo.text}\n          onChange={(event) => onEditText(event.target.value)}\n          onBlur={() => setIsEditing(false)}\n        />\n      ) : (\n        <ListItemText\n          className={`${todo.completed ? styles.completed : ''}`}\n          id={labelId}\n          primary={todo.text}\n          onDoubleClick={() => setIsEditing(true)}\n        />\n      )}\n      <ListItemSecondaryAction onClick={onDelete}>\n        <IconButton edge=\"end\" aria-label=\"comments\">\n          <DeleteIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport TextField from '@material-ui/core/TextField';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  addTodo,\n  removeTodo,\n  editTodoText,\n  toggleTodo,\n  selectTodos,\n} from './todoSlice';\nimport { TodoItem } from './TodoItem';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  form: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport function Todo() {\n  const classes = useStyles();\n  const todos = useAppSelector(selectTodos);\n  const dispatch = useAppDispatch();\n\n  const input = React.createRef<HTMLInputElement>();\n  const handleSubmitNewTodo = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    if (input.current) {\n      const todoText = input.current.value;\n      if (todoText) {\n        dispatch(addTodo(todoText));\n        input.current.value = '';\n      }\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <h1>Todos</h1>\n      <form\n        className={classes.form}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={handleSubmitNewTodo}\n      >\n        <TextField\n          inputRef={input}\n          id=\"new-todo\"\n          label=\"What needs to be done?\"\n          fullWidth={true}\n        />\n      </form>\n      <List>\n        {todos.map((todo, index) => {\n          return (\n            <TodoItem\n              key={index}\n              todo={todo}\n              labelId={`checkbox-list-label-${index}`}\n              onToggle={() => dispatch(toggleTodo(index))}\n              onDelete={() => dispatch(removeTodo(index))}\n              onEditText={(text) => dispatch(editTodoText([index, text]))}\n            />\n          );\n        })}\n      </List>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Todo } from './features/todo/Todo';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport todoReducer from '../features/todo/todoSlice';\n\nexport const store = configureStore({\n  reducer: {\n    todo: todoReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}